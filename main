import streamlit as st
import random
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

def gerar_pergunta(nivel):
    if nivel == "F√°cil":
        a, b = random.randint(1, 10), random.randint(1, 10)
        operador = random.choice(["+", "-"])
    elif nivel == "M√©dio":
        a, b = random.randint(1, 10), random.randint(1, 10)
        operador = random.choice(["+", "-", "*"])
    else:  # Dif√≠cil
        a, b = random.randint(10, 30), random.randint(1, 10)
        operador = random.choice(["+", "-", "*"])
    
    pergunta = f"{a} {operador} {b}"
    resposta = eval(pergunta)  # Calcula a resposta
    return pergunta, resposta

if 'model' not in st.session_state:
    st.session_state.model = DecisionTreeClassifier()  
    st.session_state.pontos_usuario = []
    st.session_state.respostas_usuario = []
    st.session_state.niveis_pergunta = []


def treinar_modelo():
   
    if len(st.session_state.pontos_usuario) > 5:  
        X = np.array(st.session_state.pontos_usuario).reshape(-1, 1)  
        y = np.array(st.session_state.niveis_pergunta)  
        st.session_state.model.fit(X, y)


def prever_nivel():
    if len(st.session_state.pontos_usuario) > 5:
        X = np.array(st.session_state.pontos_usuario[-5:]).reshape(-1, 1)  # Usando os √∫ltimos 5 pontos
        nivel_previsto = st.session_state.model.predict(X[-1].reshape(1, -1))  # Prevendo pr√≥ximo n√≠vel
        return nivel_previsto[0]
    else:
        return "F√°cil"  
st.title("Vamos aprender Matem√°tica")


nivel = prever_nivel()  
st.sidebar.header("Configura√ß√µes")
st.sidebar.write(f"N√≠vel de Dificuldade: {nivel}")


if "pergunta" not in st.session_state:
    st.session_state.pergunta, st.session_state.resposta_correta = gerar_pergunta(nivel)

if "pontuacao" not in st.session_state:
    st.session_state.pontuacao = 0
    st.session_state.total_perguntas = 0


st.subheader("Resolva a seguinte quest√£o:")
st.write(st.session_state.pergunta)


resposta_usuario = st.text_input("Sua resposta:", "")


if st.button("Verificar"):
    try:
        # Verifica se a entrada √© um n√∫mero v√°lido (positivo ou negativo)
        if float(resposta_usuario) == st.session_state.resposta_correta:
            st.success("Parab√©ns! Voc√™ acertou. üéâ")
            st.session_state.pontuacao += 1
            st.session_state.pontos_usuario.append(1)  # Registrando acerto
        else:
            st.error(f"Resposta errada! A resposta correta √© {st.session_state.resposta_correta}.")
            st.session_state.pontos_usuario.append(0)  # Registrando erro
        
        st.session_state.total_perguntas += 1
 st.session_state.niveis_pergunta.append(nivel)  # Registrando n√≠vel de dificuldade

        # Gerar nova pergunta
        st.session_state.pergunta, st.session_state.resposta_correta = gerar_pergunta(nivel)

        # Treinar o modelo com os dados coletados
        treinar_modelo()

    except ValueError:
        st.error("Por favor, insira um n√∫mero v√°lido.")

# Exibir pontua√ß√£o
st.sidebar.subheader("Seu Progresso")
st.sidebar.write(f"Pontua√ß√£o: {st.session_state.pontuacao}")
st.sidebar.write(f"Total de Perguntas: {st.session_state.total_perguntas}")

